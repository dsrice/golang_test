// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBases(t *testing.T) {
	t.Parallel()

	query := Bases()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBasesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bases().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BaseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBasesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BaseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Base exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BaseExists to return true, but got false.")
	}
}

func testBasesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	baseFound, err := FindBase(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if baseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBasesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bases().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBasesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bases().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBasesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	baseOne := &Base{}
	baseTwo := &Base{}
	if err = randomize.Struct(seed, baseOne, baseDBTypes, false, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}
	if err = randomize.Struct(seed, baseTwo, baseDBTypes, false, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = baseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = baseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	baseOne := &Base{}
	baseTwo := &Base{}
	if err = randomize.Struct(seed, baseOne, baseDBTypes, false, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}
	if err = randomize.Struct(seed, baseTwo, baseDBTypes, false, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = baseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = baseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func baseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func baseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Base) error {
	*o = Base{}
	return nil
}

func testBasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Base{}
	o := &Base{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, baseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Base object: %s", err)
	}

	AddBaseHook(boil.BeforeInsertHook, baseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	baseBeforeInsertHooks = []BaseHook{}

	AddBaseHook(boil.AfterInsertHook, baseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	baseAfterInsertHooks = []BaseHook{}

	AddBaseHook(boil.AfterSelectHook, baseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	baseAfterSelectHooks = []BaseHook{}

	AddBaseHook(boil.BeforeUpdateHook, baseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	baseBeforeUpdateHooks = []BaseHook{}

	AddBaseHook(boil.AfterUpdateHook, baseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	baseAfterUpdateHooks = []BaseHook{}

	AddBaseHook(boil.BeforeDeleteHook, baseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	baseBeforeDeleteHooks = []BaseHook{}

	AddBaseHook(boil.AfterDeleteHook, baseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	baseAfterDeleteHooks = []BaseHook{}

	AddBaseHook(boil.BeforeUpsertHook, baseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	baseBeforeUpsertHooks = []BaseHook{}

	AddBaseHook(boil.AfterUpsertHook, baseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	baseAfterUpsertHooks = []BaseHook{}
}

func testBasesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(baseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBasesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBasesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BaseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBasesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	baseDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar(64)`}
	_           = bytes.MinRead
)

func testBasesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(basePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(baseAllColumns) == len(basePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, baseDBTypes, true, basePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(baseAllColumns) == len(basePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Base{}
	if err = randomize.Struct(seed, o, baseDBTypes, true, baseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, baseDBTypes, true, basePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(baseAllColumns, basePrimaryKeyColumns) {
		fields = baseAllColumns
	} else {
		fields = strmangle.SetComplement(
			baseAllColumns,
			basePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BaseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBasesUpsert(t *testing.T) {
	t.Parallel()

	if len(baseAllColumns) == len(basePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Base{}
	if err = randomize.Struct(seed, &o, baseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Base: %s", err)
	}

	count, err := Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, baseDBTypes, false, basePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Base struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Base: %s", err)
	}

	count, err = Bases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
